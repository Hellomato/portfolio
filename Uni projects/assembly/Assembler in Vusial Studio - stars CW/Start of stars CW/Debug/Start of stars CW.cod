; Listing generated by Microsoft (R) Optimizing Compiler Version 19.23.28105.4 

	TITLE	I:\old desktop\Assembler in Vusial Studio - stars CW\Start of stars CW\Start of stars CW.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?numItems@@3HA					; numItems
PUBLIC	?items@@3PAHA					; items
PUBLIC	?anItem@@3HA					; anItem
PUBLIC	?counter@@3HA					; counter
_BSS	SEGMENT
?numItems@@3HA DD 01H DUP (?)				; numItems
?items@@3PAHA DD 01H DUP (?)				; items
?anItem@@3HA DD	01H DUP (?)				; anItem
?counter@@3HA DD 01H DUP (?)				; counter
_BSS	ENDS
msvcjmc	SEGMENT
__F66CEB67_corecrt_stdio_config@h DB 01H
__101834BA_corecrt_wstdio@h DB 01H
__AD6A91B7_stdio@h DB 01H
__367CC694_corecrt_memcpy_s@h DB 01H
__5467428D_corecrt_wconio@h DB 01H
__4442441F_corecrt_wio@h DB 01H
__DC9673E3_corecrt_wstring@h DB 01H
__45F4AF76_corecrt_wtime@h DB 01H
__186FF47F_stat@h DB 01H
__534C724A_wchar@h DB 01H
__62A468D7_tchar@h DB 01H
__24E9E95F_stdlib@h DB 01H
__575CE802_Start of stars CW@cpp DB 01H
msvcjmc	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	___local_stdio_scanf_options
PUBLIC	__vfprintf_l
PUBLIC	_printf
PUBLIC	__vfscanf_l
PUBLIC	_scanf
PUBLIC	?printChar@@YGXD@Z				; printChar
PUBLIC	?printStr@@YGXPAD@Z				; printStr
PUBLIC	?printInt@@YGXH@Z				; printInt
PUBLIC	_wmain
PUBLIC	__JustMyCode_Default
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA ; `__local_stdio_scanf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_0CG@GCHFCOLA@Enter?5item?5?$CFd?5?$CI0?5means?5end?5of?5d@ ; `string'
PUBLIC	??_C@_02DPKJAMEF@?$CFd@				; `string'
PUBLIC	??_C@_0BF@KFNPCBAM@press?5enter?5to?5quit?6@	; `string'
PUBLIC	??_C@_02HAOIJKIC@?$CFc@				; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
EXTRN	__imp____acrt_iob_func:PROC
EXTRN	__imp____stdio_common_vfprintf:PROC
EXTRN	__imp____stdio_common_vfscanf:PROC
EXTRN	__imp__malloc:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_scanf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02HAOIJKIC@?$CFc@
CONST	SEGMENT
??_C@_02HAOIJKIC@?$CFc@ DB '%c', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@KFNPCBAM@press?5enter?5to?5quit?6@
CONST	SEGMENT
??_C@_0BF@KFNPCBAM@press?5enter?5to?5quit?6@ DB 'press enter to quit', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd@ DB '%d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@GCHFCOLA@Enter?5item?5?$CFd?5?$CI0?5means?5end?5of?5d@
CONST	SEGMENT
??_C@_0CG@GCHFCOLA@Enter?5item?5?$CFd?5?$CI0?5means?5end?5of?5d@ DB 'Ente'
	DB	'r item %d (0 means end of data): ', 00H	; `string'
CONST	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File I:\old desktop\Assembler in Vusial Studio - stars CW\Start of stars CW\Start of stars CW.cpp
;	COMDAT _wmain
_TEXT	SEGMENT
_dummy$ = -20						; size = 10
__$ArrayPad$ = -4					; size = 4
_argc$ = 8						; size = 4
_argv$ = 12						; size = 4
_wmain	PROC						; COMDAT

; 48   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 49   : 	items = (int *) malloc(1000); // I thnk that should cover it.

  00028	8b f4		 mov	 esi, esp
  0002a	68 e8 03 00 00	 push	 1000			; 000003e8H
  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00035	83 c4 04	 add	 esp, 4
  00038	3b f4		 cmp	 esi, esp
  0003a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003f	a3 00 00 00 00	 mov	 DWORD PTR ?items@@3PAHA, eax ; items

; 50   : 
; 51   : 	//**********************************************************************//
; 52   : 	// As usual, we use "C" to do the heavy lifting and enter the numbers.	//
; 53   : 	//**********************************************************************//
; 54   : 	
; 55   : 	numItems = 0;

  00044	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?numItems@@3HA, 0 ; numItems
$LN4@wmain:

; 56   : 	do
; 57   : 	{
; 58   : 		printf("Enter item %d (0 means end of data): ", numItems + 1);

  0004e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?numItems@@3HA ; numItems
  00053	83 c0 01	 add	 eax, 1
  00056	50		 push	 eax
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@GCHFCOLA@Enter?5item?5?$CFd?5?$CI0?5means?5end?5of?5d@
  0005c	e8 00 00 00 00	 call	 _printf
  00061	83 c4 08	 add	 esp, 8

; 59   : 		scanf("%d", &anItem);

  00064	68 00 00 00 00	 push	 OFFSET ?anItem@@3HA	; anItem
  00069	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  0006e	e8 00 00 00 00	 call	 _scanf
  00073	83 c4 08	 add	 esp, 8

; 60   : 		items[numItems] = anItem;

  00076	a1 00 00 00 00	 mov	 eax, DWORD PTR ?numItems@@3HA ; numItems
  0007b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?items@@3PAHA ; items
  00081	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?anItem@@3HA ; anItem
  00087	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx

; 61   : 		numItems++;

  0008a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?numItems@@3HA ; numItems
  0008f	83 c0 01	 add	 eax, 1
  00092	a3 00 00 00 00	 mov	 DWORD PTR ?numItems@@3HA, eax ; numItems

; 62   : 
; 63   : 	} while (anItem != 0);

  00097	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?anItem@@3HA, 0 ; anItem
  0009e	75 ae		 jne	 SHORT $LN4@wmain

; 64   : 		
; 65   : 
; 66   : 
; 67   : 	//**********************************************************************//
; 68   : 	// Into assembler.														//
; 69   : 	// All the text in green after the "//" is a comment.  Comments are		//
; 70   : 	// purely for us humans to leave notes for ourselves; they are ignored	//
; 71   : 	// by the computer.														//
; 72   : 	//**********************************************************************//
; 73   : 	__asm
; 74   : 	{
; 75   : 		mov ebx, [numItems]

  000a0	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?numItems@@3HA ; numItems

; 76   : 		sub ebx, 2

  000a6	83 eb 02	 sub	 ebx, 2

; 77   : 		mov eax, 4 

  000a9	b8 04 00 00 00	 mov	 eax, 4

; 78   : 		mul ebx

  000ae	f7 e3		 mul	 ebx

; 79   : 		inc ebx

  000b0	43		 inc	 ebx

; 80   : 		mov [counter], 1

  000b1	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?counter@@3HA, 1 ; counter

; 81   : 
; 82   : 		mov esi, [items]

  000bb	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?items@@3PAHA ; items

; 83   : 		add esi, eax

  000c1	03 f0		 add	 esi, eax
$loop1$9:

; 84   : 
; 85   : 		loop1:	mov ecx, [esi]

  000c3	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 86   : 				mov edx, [counter]

  000c5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?counter@@3HA ; counter

; 87   : 				cmp edx, 10

  000cb	83 fa 0a	 cmp	 edx, 10			; 0000000aH

; 88   : 				jae skip1

  000ce	73 09		 jae	 SHORT $skip1$10

; 89   : 				push 0

  000d0	6a 00		 push	 0

; 90   : 				call printInt

  000d2	e8 00 00 00 00	 call	 ?printInt@@YGXH@Z	; printInt

; 91   : 				mov ecx, [esi]

  000d7	8b 0e		 mov	 ecx, DWORD PTR [esi]
$skip1$10:

; 92   : 		skip1:	push [counter]

  000d9	ff 35 00 00 00
	00		 push	 DWORD PTR ?counter@@3HA	; counter

; 93   : 				call printInt				

  000df	e8 00 00 00 00	 call	 ?printInt@@YGXH@Z	; printInt

; 94   : 				push '|'

  000e4	6a 7c		 push	 124			; 0000007cH

; 95   : 				call printChar

  000e6	e8 00 00 00 00	 call	 ?printChar@@YGXD@Z	; printChar

; 96   : 				inc [counter]

  000eb	ff 05 00 00 00
	00		 inc	 DWORD PTR ?counter@@3HA	; counter

; 97   : 				
; 98   : 
; 99   : 				call printStars

  000f1	e8 0f 00 00 00	 call	 $printStars$11

; 100  : 				sub esi, 4

  000f6	83 ee 04	 sub	 esi, 4

; 101  : 
; 102  : 				mov edx, [counter]

  000f9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?counter@@3HA ; counter

; 103  : 				cmp edx, ebx

  000ff	3b d3		 cmp	 edx, ebx

; 104  : 				jne loop1

  00101	75 c0		 jne	 SHORT $loop1$9

; 105  : 
; 106  : 				
; 107  : 
; 108  : 		
; 109  : 			
; 110  : 
; 111  : 		
; 112  : 		
; 113  : 		
; 114  : 		
; 115  : 		
; 116  : 		
; 117  : 		
; 118  : 		jmp finish		// We need to jump past the subroutine(s) that follow

  00103	eb 26		 jmp	 SHORT $finish$12
$printStars$11:

; 119  : 							// else the CPU will just carry on going.
; 120  : 
; 121  : 
; 122  : 
; 123  : 
; 124  : 
; 125  : 		//**********************************************************************//
; 126  : 		// Subroutimes start here, bits of code we want to execute more than	//
; 127  : 		// once, or just because we want to split a compliated task into several//
; 128  : 		// simpler ones.														//
; 129  : 		//**********************************************************************//
; 130  : 	printStars:
; 131  : 		mov ecx, [esi]

  00105	8b 0e		 mov	 ecx, DWORD PTR [esi]
$another$13:

; 132  : 			 
; 133  : 	another:push ecx

  00107	51		 push	 ecx

; 134  : 			push '*'

  00108	6a 2a		 push	 42			; 0000002aH

; 135  : 			call printChar

  0010a	e8 00 00 00 00	 call	 ?printChar@@YGXD@Z	; printChar

; 136  : 			pop ecx

  0010f	59		 pop	 ecx

; 137  : 			dec ecx

  00110	49		 dec	 ecx

; 138  : 			cmp ecx, 0

  00111	83 f9 00	 cmp	 ecx, 0

; 139  : 			jne another

  00114	75 f1		 jne	 SHORT $another$13

; 140  : 			call printNewLine

  00116	e8 01 00 00 00	 call	 $printNewLine$14

; 141  : 			ret

  0011b	c3		 ret	 0
$printNewLine$14:

; 142  : 
; 143  : 		printNewLine:
; 144  : 			push '\r'				// Two lines to print a char.

  0011c	6a 0d		 push	 13			; 0000000dH

; 145  : 			call printChar

  0011e	e8 00 00 00 00	 call	 ?printChar@@YGXD@Z	; printChar

; 146  : 
; 147  : 			push '\n'				// Two lines to print another char.

  00123	6a 0a		 push	 10			; 0000000aH

; 148  : 			call printChar

  00125	e8 00 00 00 00	 call	 ?printChar@@YGXD@Z	; printChar

; 149  : 
; 150  : 			ret					// And back to <whaerever we came from>

  0012a	c3		 ret	 0
$finish$12:

; 151  : 
; 152  : 
; 153  : 
; 154  : 
; 155  : 
; 156  : 		//**********************************************************************//
; 157  : 		// Label to mark the end; do nothing, just jump here to finish.			//
; 158  : 		//**********************************************************************//
; 159  : 		finish:						// Do nothing			
; 160  : 	}
; 161  : 
; 162  : 
; 163  : 	//**********************************************************************//
; 164  : 	// Out of assembler.													//
; 165  : 	//**********************************************************************//
; 166  : 	printf("press enter to quit\n");

  0012b	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@KFNPCBAM@press?5enter?5to?5quit?6@
  00130	e8 00 00 00 00	 call	 _printf
  00135	83 c4 04	 add	 esp, 4

; 167  : 	char dummy[10];	     //Just in case several keys in buffer
; 168  : 	scanf("%c", dummy);  //pause.

  00138	8d 45 ec	 lea	 eax, DWORD PTR _dummy$[ebp]
  0013b	50		 push	 eax
  0013c	68 00 00 00 00	 push	 OFFSET ??_C@_02HAOIJKIC@?$CFc@
  00141	e8 00 00 00 00	 call	 _scanf
  00146	83 c4 08	 add	 esp, 8

; 169  : 	scanf("%c", dummy);  //pause.  And once more.  Something weird going on.

  00149	8d 45 ec	 lea	 eax, DWORD PTR _dummy$[ebp]
  0014c	50		 push	 eax
  0014d	68 00 00 00 00	 push	 OFFSET ??_C@_02HAOIJKIC@?$CFc@
  00152	e8 00 00 00 00	 call	 _scanf
  00157	83 c4 08	 add	 esp, 8

; 170  : }

  0015a	52		 push	 edx
  0015b	8b cd		 mov	 ecx, ebp
  0015d	50		 push	 eax
  0015e	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@wmain
  00164	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00169	58		 pop	 eax
  0016a	5a		 pop	 edx
  0016b	5f		 pop	 edi
  0016c	5e		 pop	 esi
  0016d	5b		 pop	 ebx
  0016e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00171	33 cd		 xor	 ecx, ebp
  00173	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00178	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0017e	3b ec		 cmp	 ebp, esp
  00180	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00185	8b e5		 mov	 esp, ebp
  00187	5d		 pop	 ebp
  00188	c3		 ret	 0
  00189	0f 1f 00	 npad	 3
$LN8@wmain:
  0018c	01 00 00 00	 DD	 1
  00190	00 00 00 00	 DD	 $LN7@wmain
$LN7@wmain:
  00194	ec ff ff ff	 DD	 -20			; ffffffecH
  00198	0a 00 00 00	 DD	 10			; 0000000aH
  0019c	00 00 00 00	 DD	 $LN6@wmain
$LN6@wmain:
  001a0	64		 DB	 100			; 00000064H
  001a1	75		 DB	 117			; 00000075H
  001a2	6d		 DB	 109			; 0000006dH
  001a3	6d		 DB	 109			; 0000006dH
  001a4	79		 DB	 121			; 00000079H
  001a5	00		 DB	 0
_wmain	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File I:\old desktop\Assembler in Vusial Studio - stars CW\Start of stars CW\Start of stars CW.cpp
;	COMDAT ?printInt@@YGXH@Z
_TEXT	SEGMENT
_someInt$ = 8						; size = 4
?printInt@@YGXH@Z PROC					; printInt, COMDAT

; 219  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __575CE802_Start of stars CW@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 220  : 	printf("%d", someInt);

  00028	8b 45 08	 mov	 eax, DWORD PTR _someInt$[ebp]
  0002b	50		 push	 eax
  0002c	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  00031	e8 00 00 00 00	 call	 _printf
  00036	83 c4 08	 add	 esp, 8

; 221  : }	// we don't seee the "ret" instruction unless you view the ".cod" listing 

  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00042	3b ec		 cmp	 ebp, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c2 04 00	 ret	 4
?printInt@@YGXH@Z ENDP					; printInt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File I:\old desktop\Assembler in Vusial Studio - stars CW\Start of stars CW\Start of stars CW.cpp
;	COMDAT ?printStr@@YGXPAD@Z
_TEXT	SEGMENT
_strAddr$ = 8						; size = 4
?printStr@@YGXPAD@Z PROC				; printStr, COMDAT

; 199  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __575CE802_Start of stars CW@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 200  : 	printf("%s", strAddr);

  00028	8b 45 08	 mov	 eax, DWORD PTR _strAddr$[ebp]
  0002b	50		 push	 eax
  0002c	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00031	e8 00 00 00 00	 call	 _printf
  00036	83 c4 08	 add	 esp, 8

; 201  : }	// we don't seee the "ret" instruction unless you view the ".cod" listing 

  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00042	3b ec		 cmp	 ebp, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c2 04 00	 ret	 4
?printStr@@YGXPAD@Z ENDP				; printStr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File I:\old desktop\Assembler in Vusial Studio - stars CW\Start of stars CW\Start of stars CW.cpp
;	COMDAT ?printChar@@YGXD@Z
_TEXT	SEGMENT
_c$ = 8							; size = 1
?printChar@@YGXD@Z PROC					; printChar, COMDAT

; 186  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __575CE802_Start of stars CW@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 187  : 	printf("%c", c);  //%c means as a char

  00028	0f be 45 08	 movsx	 eax, BYTE PTR _c$[ebp]
  0002c	50		 push	 eax
  0002d	68 00 00 00 00	 push	 OFFSET ??_C@_02HAOIJKIC@?$CFc@
  00032	e8 00 00 00 00	 call	 _printf
  00037	83 c4 08	 add	 esp, 8

; 188  : 
; 189  : }	// we don't seee the "ret" instruction unless you view the ".cod" listing 

  0003a	5f		 pop	 edi
  0003b	5e		 pop	 esi
  0003c	5b		 pop	 ebx
  0003d	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00043	3b ec		 cmp	 ebp, esp
  00045	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c2 04 00	 ret	 4
?printChar@@YGXD@Z ENDP					; printChar
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _scanf
_TEXT	SEGMENT
__ArgList$ = -20					; size = 4
__Result$ = -8						; size = 4
__Format$ = 8						; size = 4
_scanf	PROC						; COMDAT

; 1280 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00012	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __AD6A91B7_stdio@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1281 :         int _Result;
; 1282 :         va_list _ArgList;
; 1283 :         __crt_va_start(_ArgList, _Format);

  00028	8d 45 0c	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0002b	89 45 ec	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1284 :         _Result = _vfscanf_l(stdin, _Format, NULL, _ArgList);

  0002e	8b 45 ec	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00031	50		 push	 eax
  00032	6a 00		 push	 0
  00034	8b 4d 08	 mov	 ecx, DWORD PTR __Format$[ebp]
  00037	51		 push	 ecx
  00038	8b f4		 mov	 esi, esp
  0003a	6a 00		 push	 0
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____acrt_iob_func
  00042	83 c4 04	 add	 esp, 4
  00045	3b f4		 cmp	 esi, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 __vfscanf_l
  00052	83 c4 10	 add	 esp, 16			; 00000010H
  00055	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax

; 1285 :         __crt_va_end(_ArgList);

  00058	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1286 :         return _Result;

  0005f	8b 45 f8	 mov	 eax, DWORD PTR __Result$[ebp]

; 1287 :     }

  00062	5f		 pop	 edi
  00063	5e		 pop	 esi
  00064	5b		 pop	 ebx
  00065	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  0006b	3b ec		 cmp	 ebp, esp
  0006d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c3		 ret	 0
_scanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vfscanf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfscanf_l PROC					; COMDAT

; 1062 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __AD6A91B7_stdio@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1063 :         return __stdio_common_vfscanf(

  00028	8b f4		 mov	 esi, esp
  0002a	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0002d	50		 push	 eax
  0002e	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00031	51		 push	 ecx
  00032	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00035	52		 push	 edx
  00036	8b 45 08	 mov	 eax, DWORD PTR __Stream$[ebp]
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ___local_stdio_scanf_options
  0003f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00042	51		 push	 ecx
  00043	8b 10		 mov	 edx, DWORD PTR [eax]
  00045	52		 push	 edx
  00046	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vfscanf
  0004c	83 c4 18	 add	 esp, 24			; 00000018H
  0004f	3b f4		 cmp	 esi, esp
  00051	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1064 :             _CRT_INTERNAL_LOCAL_SCANF_OPTIONS,
; 1065 :             _Stream, _Format, _Locale, _ArgList);
; 1066 :     }

  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx
  00059	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0005f	3b ec		 cmp	 ebp, esp
  00061	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c3		 ret	 0
__vfscanf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _printf
_TEXT	SEGMENT
__ArgList$ = -20					; size = 4
__Result$ = -8						; size = 4
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT

; 954  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00012	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __AD6A91B7_stdio@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 955  :         int _Result;
; 956  :         va_list _ArgList;
; 957  :         __crt_va_start(_ArgList, _Format);

  00028	8d 45 0c	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0002b	89 45 ec	 mov	 DWORD PTR __ArgList$[ebp], eax

; 958  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

  0002e	8b 45 ec	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00031	50		 push	 eax
  00032	6a 00		 push	 0
  00034	8b 4d 08	 mov	 ecx, DWORD PTR __Format$[ebp]
  00037	51		 push	 ecx
  00038	8b f4		 mov	 esi, esp
  0003a	6a 01		 push	 1
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____acrt_iob_func
  00042	83 c4 04	 add	 esp, 4
  00045	3b f4		 cmp	 esi, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 __vfprintf_l
  00052	83 c4 10	 add	 esp, 16			; 00000010H
  00055	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax

; 959  :         __crt_va_end(_ArgList);

  00058	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 960  :         return _Result;

  0005f	8b 45 f8	 mov	 eax, DWORD PTR __Result$[ebp]

; 961  :     }

  00062	5f		 pop	 edi
  00063	5e		 pop	 esi
  00064	5b		 pop	 ebx
  00065	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  0006b	3b ec		 cmp	 ebp, esp
  0006d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c3		 ret	 0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 642  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __AD6A91B7_stdio@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00028	8b f4		 mov	 esi, esp
  0002a	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0002d	50		 push	 eax
  0002e	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00031	51		 push	 ecx
  00032	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00035	52		 push	 edx
  00036	8b 45 08	 mov	 eax, DWORD PTR __Stream$[ebp]
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  0003f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00042	51		 push	 ecx
  00043	8b 10		 mov	 edx, DWORD PTR [eax]
  00045	52		 push	 edx
  00046	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vfprintf
  0004c	83 c4 18	 add	 esp, 24			; 00000018H
  0004f	3b f4		 cmp	 esi, esp
  00051	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 644  :     }

  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx
  00059	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0005f	3b ec		 cmp	 ebp, esp
  00061	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c3		 ret	 0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_scanf_options
_TEXT	SEGMENT
___local_stdio_scanf_options PROC			; COMDAT

; 96   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __F66CEB67_corecrt_stdio_config@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 97   :         static unsigned __int64 _OptionsStorage;
; 98   :         return &_OptionsStorage;

  00028	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA ; `__local_stdio_scanf_options'::`2'::_OptionsStorage

; 99   :     }

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
___local_stdio_scanf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __F66CEB67_corecrt_stdio_config@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00028	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
